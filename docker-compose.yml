version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    ports:
      - 8080:8080
    networks:
      - backend
    volumes:
      - ./Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      
  album-service:
    image: album-service:compose_build
    build:
      context: ./album-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${ALBUM_SERVICE_PORT}
      
  campaign-service:
    image: campaign-service:compose_build
    build:
      context: ./campaign-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${CAMPAIGN_SERVICE_PORT}

  feedPost-service:
    image: feedPost-service:compose_build
    build:
      context: ./feedPost-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${FEED_POST_SERVICE_PORT}

  follows-service:
    image: follows-service:compose_build
    build:
      context: ./follows-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${FOLLOWS_SERVICE_PORT}

    message-service:
      image: message-service:compose_build
      build:
        context: ./message-service
        dockerfile: Dockerfile
      networks:
        - backend
      environment:
        PORT: ${MESSAGE_SERVICE_PORT}

    notificationSettings-service:
      image: notificationSettings-service:compose_build
      build:
        context: ./notificationSettings-service
        dockerfile: Dockerfile
      networks:
        - backend
      environment:
        PORT: ${NOTIFICATION_SETTINGS_SERVICE_PORT}

    partnership-service:
      image: partnership-service:compose_build
      build:
        context: ./partnership-service
        dockerfile: Dockerfile
      networks:
        - backend
      environment:
        PORT: ${PARTNERSHIP_SERVICE_PORT}

    saved-service:
        image: saved-service:compose_build
        build:
          context: ./saved-service
          dockerfile: Dockerfile
        networks:
          - backend
        environment:
          PORT: ${SAVED_SERVICE_PORT}

    story-service:
        image: story-service:compose_build
        build:
          context: ./story-service
          dockerfile: Dockerfile
        networks:
          - backend
        environment:
          PORT: ${STORY_POST_SERVICE_PORT}

    user-service:
      image: user-service:compose_build
      build:
        context: ./user-service
        dockerfile: Dockerfile
      networks:
        - backend
      environment:
        PORT: ${USER_SERVICE_PORT}


networks:
  backend:
    name: restuarant
    driver: bridge
